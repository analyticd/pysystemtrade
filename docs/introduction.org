Here is a whistlestop tour of what pysystemtrade can currently do.
You'll probably want to read the [[./userguide.org][users guide]] after
this.

** A simple trading rule

(code is [[/examples/introduction/asimpletradingrule.py][here]] )

As systematic traders we believe that the future will be at least a bit
like the past. So first of all we need some past data. In principle past
data can come from many places, but to begin with we'll get it from some
pre-baked .csv files:

You want the output of this to be the absolute path to ../
To achieve this you have to have first executed a source block in the
project root directory, e.g., ../
#+begin_src python :session
import os
os.getcwd()
#+end_src

#+RESULTS:
: /Users/lriley/.ghq/github.com/analyticd/pysystemtrade

Check that you configured to use the correct anaconda environment. It should be
: /Users/lriley/anaconda/envs/analyticd-pysystemtrade
If it isn't then kill python process by killing the *python* buffer and then do
=M-x conda-env-activate analyticd-pysystemtrade RET=
then reevaluate the following code block.
#+begin_src python :session
import sys
sys.prefix
#+end_src

#+RESULTS:
: /Users/lriley/anaconda/envs/analyticd-pysystemtrade

#+BEGIN_SRC python :results output :session
from sysdata.csvdata import csvFuturesData
data=csvFuturesData()
data
#+END_SRC

#+RESULTS:
: 
: FuturesData object with 38 instruments

What instruments have we got?

#+BEGIN_SRC python :session
data.get_instrument_list()
#+END_SRC

#+RESULTS:
| CORN | LEANHOG | LIVECOW | SOYBEAN | WHEAT | KR10 | KR3 | BOBL | BTP | BUND | OAT | SHATZ | US10 | US2 | US20 | US5 | V2X | VIX | KOSPI | AEX | CAC | SMI | NASDAQ | SP500 | AUD | EUR | GBP | JPY | MXP | NZD | COPPER | GOLD | PALLAD | PLAT | CRUDE_W | GAS_US | EDOLLAR | EUROSTX |


And what kind of data can we get for them?

#+BEGIN_SRC python :session
data.get_raw_price("EDOLLAR").tail(5)
#+END_SRC

#+RESULTS:
: 2016-11-07    98.5600
: 2016-11-08    98.5100
: 2016-11-09    98.2950
: 2016-11-10    98.1600
: 2016-11-11    98.1175
: Name: price, dtype: float64


/I'll update the data regularly, as well as including methods for you to
get your own data from different sources/

/Technical note: This is the 'back-adjusted' price for the future,
formed from stiching adjacent contracts together using the 'panama'
method/

=data= objects behave a bit like dicts (though they don't formally
inherit from them). So these both work:

#+BEGIN_SRC python :session
data.keys() ## equivalent to data.get_instrument_list
data['SP500'] ## equivalent to data.get_instrument_price
#+END_SRC

#+RESULTS:
#+begin_example
1997-09-10    1047.6725
1997-09-11    1040.6725
1997-09-12    1056.6725
1997-09-15    1054.6725
1997-09-16    1078.6725
1997-09-17    1078.6725
1997-09-18    1080.6725
1997-09-19    1083.6725
1997-09-22    1088.6725
1997-09-23    1084.6725
1997-09-24    1077.6725
1997-09-25    1069.6725
1997-09-26    1075.6725
1997-09-29    1084.6725
1997-09-30    1076.6725
1997-10-01    1086.6725
1997-10-02    1091.6725
1997-10-03    1097.6725
1997-10-06    1104.6725
1997-10-07    1112.6725
1997-10-08    1105.6725
1997-10-09    1100.6725
1997-10-10    1099.6725
1997-10-13    1098.6725
1997-10-14    1099.6725
1997-10-15    1096.6725
1997-10-16    1082.6725
1997-10-17    1071.6725
1997-10-20    1085.6725
1997-10-21    1101.6725
                ...    
2016-10-03    2153.5000
2016-10-04    2144.7500
2016-10-05    2153.5000
2016-10-06    2156.5000
2016-10-07    2146.5000
2016-10-10    2159.2500
2016-10-11    2134.5000
2016-10-12    2131.5000
2016-10-13    2126.5000
2016-10-14    2127.0000
2016-10-17    2123.8750
2016-10-18    2132.2500
2016-10-19    2138.5000
2016-10-20    2137.0000
2016-10-21    2134.7500
2016-10-24    2144.5000
2016-10-25    2138.5000
2016-10-26    2133.7500
2016-10-27    2124.0000
2016-10-28    2123.7500
2016-10-31    2123.5000
2016-11-01    2102.0000
2016-11-02    2090.2500
2016-11-03    2083.2500
2016-11-04    2081.5000
2016-11-07    2130.0000
2016-11-08    2134.7500
2016-11-09    2160.5000
2016-11-10    2166.7500
2016-11-11    2150.8750
Name: price, dtype: float64
#+end_example

Price data is useful, but is there any other data available? For
futures, yes, we can get the data we need to implement a carry rule:

#+BEGIN_SRC python :session
data.get_instrument_raw_carry_data("EDOLLAR").tail(6)
#+END_SRC

#+RESULTS:
:               PRICE   CARRY CARRY_CONTRACT PRICE_CONTRACT
: 2016-11-04  98.6250  98.675         201906         201909
: 2016-11-07  98.5600  98.610         201906         201909
: 2016-11-08  98.5100  98.565         201906         201909
: 2016-11-09  98.2950  98.365         201906         201909
: 2016-11-10  98.1600  98.230         201906         201909
: 2016-11-11  98.1175     NaN         201906         201909

Let's create a simple trading rule.

#+BEGIN_SRC python :results output :session :tangle ../calc_ewmac_forecast.py
import pandas as pd
from syscore.algos import robust_vol_calc

def calc_ewmac_forecast(price, Lfast, Lslow=None):
    """
    Calculate the ewmac trading fule forecast, given a price and EWMA speeds Lfast, Lslow and vol_lookback

    """
    ## price: This is the stitched price series
    ## We can't use the price of the contract we're trading, or the volatility will be jumpy
    ## And we'll miss out on the rolldown. See http://qoppac.blogspot.co.uk/2015/05/systems-building-futures-rolling.html
    price = price.resample("1B").last()
    if Lslow is None:
        Lslow=4*Lfast
    ## We don't need to calculate the decay parameter, just use the span directly
    fast_ewma=price.ewm(span=Lfast).mean()
    slow_ewma=price.ewm(span=Lslow).mean()
    raw_ewmac=fast_ewma - slow_ewma
    vol=robust_vol_calc(price.diff())
    return raw_ewmac / vol
#+END_SRC

#+RESULTS:


Let's run it and look at the output
#+BEGIN_SRC python :session
instrument_code='EDOLLAR'
price=data.daily_prices(instrument_code)
ewmac=calc_ewmac_forecast(price, 32, 128)
ewmac.columns=['forecast']
ewmac.tail(5)
#+END_SRC

#+RESULTS:
: 2016-11-07    0.100716
: 2016-11-08   -0.011247
: 2016-11-09   -0.237658
: 2016-11-10   -0.513974
: 2016-11-11   -0.835147
: Freq: B, dtype: float64

#+begin_src python :session
from matplotlib.pyplot import show
ewmac.plot()
show()
#+end_src

#+RESULTS:
: Axes(0.125,0.11;0.775x0.77)

TODO This code block produces blank output
#+BEGIN_SRC python :session :results file

# from matplotlib.pyplot import show
# ewmac.plot()
# show()

# # import matplotlib
# import matplotlib.pyplot as plt
# from matplotlib.pyplot import show
# fig=plt.figure(figsize=(3,2))
# ewmac.plot()
# fig.tight_layout()
# # ewmac.show()
# fig.savefig('python-matplot-fig.png')
# # plt.show()
# # plt.savefig('python-matplot-fig.png')
# # fig.close()
# # plt.close()
# 'python-matplot-fig.png' # return filename to org-mode


import matplotlib
from matplotlib.pyplot import show
import matplotlib.pyplot as plt
plt.savefig('../python-matplot-fig.png')
'../python-matplot-fig.png' # return filename to org-mode
#+END_SRC

#+RESULTS:
[[file:../python-matplot-fig.png]]



Did we make any money?
#+BEGIN_SRC python :session :results raw
from syscore.accounting import accountCurve
account = accountCurve(price, forecast=ewmac)
account.percent().stats()
#+END_SRC

#+RESULTS:
[[('min', '-7.911'), ('max', '5.22'), ('median', '0'), ('mean', '0.01602'), ('std', '0.515'), ('skew', '-0.5705'), ('ann_mean', '4.102'), ('ann_std', '8.24'), ('sharpe', '0.4978'), ('sortino', '0.5583'), ('avg_drawdown', '-11.93'), ('time_in_drawdown', '0.9735'), ('calmar', '0.1237'), ('avg_return_to_drawdown', '0.3439'), ('avg_loss', '-0.3289'), ('avg_gain', '0.3399'), ('gaintolossratio', '1.033'), ('profitfactor', '1.118'), ('hitrate', '0.5195'), ('t_stat', '2.891'), ('p_value', '0.003851')], ('You can also plot / print:', ['rolling_ann_std', 'drawdown', 'curve', 'percent', 'cumulative'])]

Looks like we did make a few bucks. =account=, by the way inherits from
a pandas data frame. Here are some other things we can do with it:

#+BEGIN_SRC python :session
account.sharpe() ## get the Sharpe Ratio (annualised), and any other statistic which is in the stats list
#+END_SRC

#+RESULTS:
: 0.49784804188664594

#+begin_src python :session
account.curve().plot() ## plot the cumulative account curve (equivalent to account.cumsum().plot() inicidentally)
show()
#+end_src

#+RESULTS:
: Axes(0.179907,0.193611;0.755125x0.713889)

#+begin_src python :session :results output
account.percent().curve().plot() ## gives a % curve
show()
#+end_src

#+RESULTS:
: <matplotlib.axes._subplots.AxesSubplot object at 0x11b0eb080>

#+begin_src python :session
account.percent().drawdown().plot() ## see the drawdowns as a percentage
show()
#+end_src

#+RESULTS:
: Axes(0.125,0.11;0.775x0.77)

#+begin_src python :session
account.weekly.plot() ## weekly returns (also daily [default], monthly, annual)
show()
#+end_src

#+RESULTS:
: Axes(0.125,0.11;0.775x0.77)

#+begin_src python :session
account.gross.ann_mean() ## annual mean for gross returns, also costs (there are none in this simple example)
#+end_src

#+RESULTS:
: 410210.6541818095

** A simple system

(code is [[file:~/.ghq/github.com/analyticd/pysystemtrade/pysystemtrade/examples/introduction/simplesystem.py][here]] )

This is all very well, but what we probably want to do is build a
trading *system* composed of several trading rules, and a few more
instruments.

A system consists of some =data= (which we've already seen), a number of
processing /stages/, and optionally a configuration to modify how each of
the stages behaves.

A full list of stages would include:

1. Preprocessing some raw data (which we don't cover in this
   introduction)
2. Running some trading rules over it to generate forecasts
3. Scaling and capping those forecasts
4. Combining forecasts together
5. Position sizing
6. Creating a portfolio of instruments
7. Working out the p&l

   For now let's start with the simplest possible system, one which
   contains only a trading rules stage. Let's just setup our enviroment
   again:

   #+BEGIN_SRC python :session :results output
   from sysdata.csvdata import csvFuturesData
   data=csvFuturesData()

   from systems.provided.example.rules import ewmac_forecast_with_defaults as ewmac
   #+END_SRC

   #+RESULTS:

   This is a slightly different version of the rule we defined before,
   which has default values for =Lfast= and =Lslow=. Now there are many
   ways to create a set of trading rules; here is the simplest:

   #+BEGIN_SRC python :session
   from systems.forecasting import Rules
   my_rules=Rules(ewmac)
   my_rules.trading_rules()
   #+END_SRC

   #+RESULTS:
   : '("rule0": TradingRule; function: <function ewmac_forecast_with_defaults at 0x1144137b8>  data:  and other_args: )


   This won't make much sense now, but bear with me (and don't worry if you
   get a different hexadecimal number). Suffice to say we've created a dict
   of trading rules with one variation, which has been given the thrilling
   name of =rule0=. =rule0= isn't especially meaningful, so let's come up
   with a better name:

   #+BEGIN_SRC python :session
   my_rules=Rules(dict(ewmac=ewmac))
   my_rules.trading_rules()
   #+END_SRC

   #+RESULTS:
   : '("ewmac": TradingRule; function: <function ewmac_forecast_with_defaults at 0x1144137b8>  data:  and other_args: )

   The next stage is to create a system incorporating our =data= object,
   and the =my_rules= stage.

   #+BEGIN_SRC python :session
   from systems.basesystem import System
   my_system=System([my_rules], data)
   my_system
   #+END_SRC

   #+RESULTS:
   : System with .config, .data, and .stages: rules

   We can now get forecasts:

   #+BEGIN_SRC python :session
   my_system.rules.get_raw_forecast("EDOLLAR", "ewmac").tail(5)
   #+END_SRC

   #+RESULTS:
   : 2016-11-07    0.100716
   : 2016-11-08   -0.011247
   : 2016-11-09   -0.237658
   : 2016-11-10   -0.513974
   : 2016-11-11   -0.835147
   : Freq: B, dtype: float64

   This is exactly what we got in the simple example above; but with far
   more work. Don't worry, it will be worth it.

   We'll see this pattern of =my_system...stage name...get_something()= a
   lot. The =Rules= object has become an attribute of the parent system,
   with name =rules=. Notice that the names used for each stage are fixed
   regardless of exactly what the stage class or instance is called, so we
   can always find what we need.

   What about if we want more than one trading rule, say a couple of
   variations of the ewmac rule? To define two different flavours of ewmac
   we're going to need to learn a little bit more about trading rules.
   Remember when we had =my_rules=Rules(dict(ewmac=ewmac))=? Well this is
   an equivalent way of doing it:

   #+BEGIN_SRC python :results output :session
   from systems.forecasting import TradingRule
   ewmac_rule=TradingRule(ewmac)
   my_rules=Rules(dict(ewmac=ewmac_rule))
   ewmac_rule
   #+END_SRC

   #+RESULTS:
   :
   : >>> >>> TradingRule; function: <function ewmac_forecast_with_defaults at 0x1144137b8>, data:  and other_args:

   Time to reveal what the mysterious object is. A =TradingRule= contains 3
   elements - a function, a list of any data the function needs, and a dict
   of any other arguments that can be passed to the function. So the
   function is just the =ewmac= function that we imported earlier, and in
   this trivial case there is no data, and no arguments. Having no data is
   fine, because the code assumes that you'd normally want to pass the
   price of an instrument to a trading rule if you don't tell it otherwise.
   Furthermore on this occassion having no arguments is also no problem
   since the ewmac function we're using includes some defaults.

   /If you're familiar with the concept in python of args and kwargs;
   =data= is a bit like args - we always pass a list of positional
   arguments to =function=; and =other_args= are a bit like kwargs - we
   always pass in a dict of named arguments to =function=

   There are a few different ways to define trading rules completely. I'll
   use a couple of different ones here:

   #+BEGIN_SRC python :results output :session
   ewmac_8=TradingRule((ewmac, [], dict(Lfast=8, Lslow=32))) ## as a tuple (function, data, other_args) notice the empty element in the middle
   ewmac_32=TradingRule(dict(function=ewmac, other_args=dict(Lfast=32, Lslow=128)))  ## as a dict
   my_rules=Rules(dict(ewmac8=ewmac_8, ewmac32=ewmac_32))
   my_rules.trading_rules()['ewmac32']
   #+END_SRC

   #+RESULTS:
   :
   : TradingRule; function: <function ewmac_forecast_with_defaults at 0x1144137b8>, data:  and other_args: Lfast, Lslow

   Again, let's check that =ewmac32= is the same as the =ewmac= we have
   before (it should be, since 32, 128 are the default arguments for the
   underlying trading rule function).

   #+BEGIN_SRC python :results output :session
   my_system=System([my_rules], data)
   my_system.rules.get_raw_forecast("EDOLLAR", "ewmac32").tail(5)
   #+END_SRC

   #+RESULTS:
   :
   : 2016-11-07    0.100716
   : 2016-11-08   -0.011247
   : 2016-11-09   -0.237658
   : 2016-11-10   -0.513974
   : 2016-11-11   -0.835147
   : Freq: B, dtype: float64

   Now let's introduce the idea of *config* objects. A =config= or
   configuration object allows us to control the behaviour of the various
   stages in the system.

   Configuration objects can be created on the fly or by reading in files
   written in yaml (which we'll talk about below). A configuration object
   is just a collection of attributes. We create them interactively like
   so:

   #+BEGIN_SRC python :results output :session
   from sysdata.configdata import Config
   my_config=Config()
   my_config
   #+END_SRC

   #+RESULTS:
   :
   : >>> Config with elements:

   So far, not exciting. Let's see how we'd use a =config= to define our
   trading rules:

   #+BEGIN_SRC python :results output :session
   empty_rules=Rules()
   my_config.trading_rules=dict(ewmac8=ewmac_8, ewmac32=ewmac_32)
   my_system=System([empty_rules], data, my_config)
   #+END_SRC

   #+RESULTS:

   Notice the differences from before:

   1. We pass in an 'empty' instance of rules that contains no arguments
   2. We create an element in =config=: =trading_rules=, that contains our
      dictionary of trading rules
   3. The system uses the =config.trading_rules=

      /Note if you'd passed the dict of trading rules into Rules()/ *and*
      /into the config, only the former would be used/

      Now these trading rules aren't producing forecasts that are correctly
      scaled (with an average absolute value of 10), and they don't have the
      cap of 20 that I recommend. To fix this we need to add another stage to
      our system: forecast scaling and capping.

      We could estimate these on a rolling out of sample basis:

      #+BEGIN_SRC python :results output :session
      from systems.forecast_scale_cap import ForecastScaleCap

      ## By default we pool esimates across instruments. It's worth telling the system what instruments we want to use:
      my_config.instruments=["EDOLLAR", "US10", "EDOLLAR", "CORN", "SP500"]

      ## this parameter ensures we estimate:
      my_config.use_forecast_scale_estimates=True

      fcs=ForecastScaleCap()
      my_system = System([fcs, my_rules], data, my_config)
      print(my_system.forecastScaleCap.get_forecast_scalar("EDOLLAR", "ewmac32").tail(5))
      #+END_SRC

      #+RESULTS:
      :
      : >>> ... >>> >>> ... >>> >>> >>> 2016-11-07    2.852933
      : 2016-11-08    2.853191
      : 2016-11-09    2.853442
      : 2016-11-10    2.853675
      : 2016-11-11    2.853896
      : Freq: B, dtype: float64

      Alternatively we can use the fixed values from Appendix B, table 49, of my book
      [[http:/www.systematictrading.org]["Systematic Trading"]].

      #+BEGIN_SRC python :session
      my_config.forecast_scalars=dict(ewmac8=5.3, ewmac32=2.65)

      ## this parameter ensures we don't estimate:
      my_config.use_forecast_scale_estimates=False

      ## we need a new object
      fcs=ForecastScaleCap()

      my_system=System([fcs, empty_rules], data, my_config)
      my_system.forecastScaleCap.get_capped_forecast("EDOLLAR", "ewmac32")
      #+END_SRC

      #+RESULTS:
      #+begin_example
      1983-09-26         NaN
      1983-09-27         NaN
      1983-09-28         NaN
      1983-09-29         NaN
      1983-09-30         NaN
      1983-10-03         NaN
      1983-10-04         NaN
      1983-10-05         NaN
      1983-10-06         NaN
      1983-10-07         NaN
      1983-10-10    0.238303
      1983-10-11    0.051786
      1983-10-12    0.001525
      1983-10-13   -0.085803
      1983-10-14   -0.092223
      1983-10-17    0.036671
      1983-10-18    0.090171
      1983-10-19    0.141976
      1983-10-20    0.144945
      1983-10-21    0.150130
      1983-10-24    0.019921
      1983-10-25   -0.111744
      1983-10-26   -0.237452
      1983-10-27   -0.344039
      1983-10-28   -0.484677
      1983-10-31   -0.678502
      1983-11-01   -0.901142
      1983-11-02   -1.113421
      1983-11-03   -1.348455
      1983-11-04   -1.554591
                      ...
      2016-10-03    4.959019
      2016-10-04    4.748263
      2016-10-05    4.493432
      2016-10-06    4.138542
      2016-10-07    3.881711
      2016-10-10    3.470653
      2016-10-11    3.155959
      2016-10-12    2.882462
      2016-10-13    2.716259
      2016-10-14    2.461406
      2016-10-17    2.298700
      2016-10-18    2.219017
      2016-10-19    2.176235
      2016-10-20    2.051465
      2016-10-21    1.982172
      2016-10-24    1.815297
      2016-10-25    1.673447
      2016-10-26    1.430488
      2016-10-27    1.059484
      2016-10-28    0.798835
      2016-10-31    0.590706
      2016-11-01    0.481777
      2016-11-02    0.447378
      2016-11-03    0.391227
      2016-11-04    0.427346
      2016-11-07    0.266898
      2016-11-08   -0.029803
      2016-11-09   -0.629794
      2016-11-10   -1.362031
      2016-11-11   -2.213139
      Freq: B, dtype: float64
#+end_example

      /Note that the order of stages in the list passed to
      =System([...], ...)= isn't relevant/

      #+BEGIN_EXAMPLE
      2016-05-05    12.196721
      2016-05-06    12.321943
      2016-05-09    12.526127
      2016-05-10    12.975781
      2016-05-11    13.472323
      Freq: B, dtype: float64
      #+END_EXAMPLE

      /We didn't have to pass the forecast cap of 20.0, since the system was
      happy to use the default value (this is defined in the system defaults
      file, which the full [[./userguide.org][users guide]] will tell you more
      about)./

      Since we have two trading rule variations we're naturally going to want
      to combine them (chapter 8 of my book). For a very quick and dirty
      exercise running this code will use equal forecast weights across
      instruments, and use no diversification multiplier:

      #+BEGIN_SRC python :session :results output
      from systems.forecast_combine import ForecastCombine
      combiner=ForecastCombine()
      my_system=System([fcs, empty_rules, combiner], data, my_config)
      my_system.combForecast.get_forecast_weights("EDOLLAR").tail(5)
      my_system.combForecast.get_forecast_diversification_multiplier("EDOLLAR").tail(5)
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> WARNING: No forecast weights  - using equal weights of 0.5000 over all 2 trading rules in system
                  ewmac32  ewmac8
      2016-11-07      0.5     0.5
      2016-11-08      0.5     0.5
      2016-11-09      0.5     0.5
      2016-11-10      0.5     0.5
      2016-11-11      0.5     0.5
      2016-11-07    1.0
      2016-11-08    1.0
      2016-11-09    1.0
      2016-11-10    1.0
      2016-11-11    1.0
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE
      WARNING: No forecast weights  - using equal weights of 0.5000 over all 2 trading rules in system
      #weights
                  ewmac32  ewmac8
      2016-05-05      0.5     0.5
      2016-05-06      0.5     0.5
      2016-05-09      0.5     0.5
      2016-05-10      0.5     0.5
      2016-05-11      0.5     0.5

      #fdm
      2016-05-05    1
      2016-05-06    1
      2016-05-09    1
      2016-05-10    1
      2016-05-11    1
      Freq: B, dtype: float64
      #+END_EXAMPLE

      Alternatively you can estimate div. multipliers, and weights.

      Note: Since we need to know the performance of different trading rules,
      we need to include an Accounts stage to calculate these:

      #+BEGIN_SRC python :results output :session
      from systems.account import Account
      my_account = Account()

      ## let's use naive markowitz to get more interesting results...
      my_config.forecast_weight_estimate=dict(method="one_period")
      my_config.use_forecast_weight_estimates=True

      combiner = ForecastCombine()
      my_system = System([my_account, fcs, my_rules, combiner], data, my_config)

      ## this is a bit slow, better to know what's going on
      my_system.set_logging_level("on")

      print(my_system.combForecast.get_forecast_weights("EDOLLAR").tail(5))
      print(my_system.combForecast.get_forecast_diversification_multiplier("EDOLLAR").tail(5))
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> ... >>> >>> >>> >>> >>> ... >>> >>> Calculating forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR
      Calculating capped forecast for CORN ewmac32
      Calculating raw forecast CORN for ewmac32
      Calculating capped forecast for EDOLLAR ewmac32
      Calculating raw forecast EDOLLAR for ewmac32
      Calculating capped forecast for SP500 ewmac32
      Calculating raw forecast SP500 for ewmac32
      Calculating capped forecast for US10 ewmac32
      Calculating raw forecast US10 for ewmac32
      Calculating capped forecast for CORN ewmac8
      Calculating raw forecast CORN for ewmac8
      Calculating capped forecast for EDOLLAR ewmac8
      Calculating raw forecast EDOLLAR for ewmac8
      Calculating capped forecast for SP500 ewmac8
      Calculating raw forecast SP500 for ewmac8
      Calculating capped forecast for US10 ewmac8
      Calculating raw forecast US10 for ewmac8
      Only this set of rules ['ewmac32'] is cheap enough to trade for EDOLLAR
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for CORN
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for SP500
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for US10
      Calculating raw forecast weights for EDOLLAR, over EDOLLAR
      Calculating pandl for instrument rules for EDOLLAR
      Calculating pandl for instrument forecast for EDOLLAR ewmac32
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Optimising for data from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Optimising for data from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Optimising for data from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Optimising for data from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Optimising for data from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Optimising for data from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Optimising for data from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Optimising for data from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Optimising for data from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Optimising for data from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Optimising for data from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Optimising for data from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Optimising for data from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Optimising for data from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Optimising for data from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Optimising for data from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Optimising for data from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Optimising for data from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Optimising for data from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Optimising for data from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Optimising for data from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Optimising for data from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Optimising for data from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Optimising for data from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Optimising for data from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Optimising for data from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Optimising for data from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Optimising for data from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Optimising for data from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Optimising for data from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Optimising for data from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Optimising for data from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Optimising for data from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Applying cost weighting to optimisation results
                  ewmac32
      2016-11-07      1.0
      2016-11-08      1.0
      2016-11-09      1.0
      2016-11-10      1.0
      2016-11-11      1.0
      Calculating forecast div multiplier for EDOLLAR
      Calculating forecast correlations over EDOLLAR
      Correlation estimate
      Estimating from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Estimating from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Estimating from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Estimating from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Estimating from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Estimating from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Estimating from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Estimating from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Estimating from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Estimating from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Estimating from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Estimating from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Estimating from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Estimating from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Estimating from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Estimating from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Estimating from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Estimating from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Estimating from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Estimating from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Estimating from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Estimating from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Estimating from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Estimating from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Estimating from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Estimating from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Estimating from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Estimating from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Estimating from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Estimating from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Estimating from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Estimating from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Estimating from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Estimating from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      2016-11-07    1.0
      2016-11-08    1.0
      2016-11-09    1.0
      2016-11-10    1.0
      2016-11-11    1.0
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE

                  ewmac32  ewmac8
      2016-05-05        1       0
      2016-05-06        1       0
      2016-05-09        1       0
      2016-05-10        1       0
      2016-05-11        1       0

      ## FDM
      2016-05-05    1
      2016-05-06    1
      2016-05-09    1
      2016-05-10    1
      2016-05-11    1
      Freq: B, dtype: float64
      #+END_EXAMPLE

      A little extreme, I feel. Let's use some arbitrary fixed forecast
      weights and diversification multiplier for now:

      #+BEGIN_SRC python :results output :session
      from systems.account import Account
      my_account = Account()

      my_config.forecast_weights=dict(ewmac8=0.5, ewmac32=0.5)
      my_config.forecast_div_multiplier=1.1
      my_config.use_forecast_weight_estimates = False
      my_system=System([my_account, fcs, empty_rules, combiner], data, my_config)
      my_system.combForecast.get_combined_forecast("EDOLLAR").tail(5)
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> >>> >>> >>> Adding config defaults
      Calculating combined forecast for EDOLLAR
      Calculating forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR
      Calculating capped forecast for CORN ewmac32
      Calculating raw forecast CORN for ewmac32
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac32
      Calculating raw forecast EDOLLAR for ewmac32
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac32
      Calculating raw forecast SP500 for ewmac32
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac32
      Calculating raw forecast US10 for ewmac32
      Loading csv data for US10
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Calculating capped forecast for CORN ewmac8
      Calculating raw forecast CORN for ewmac8
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac8
      Calculating raw forecast EDOLLAR for ewmac8
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac8
      Calculating raw forecast SP500 for ewmac8
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac8
      Calculating raw forecast US10 for ewmac8
      Loading csv data for US10
      Only this set of rules ['ewmac32'] is cheap enough to trade for EDOLLAR
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for CORN
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for CORN
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for SP500
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for SP500
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for US10
      Calculating raw forecast weights for EDOLLAR, over EDOLLAR
      Calculating pandl for instrument rules for EDOLLAR
      Calculating pandl for instrument forecast for EDOLLAR ewmac32
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Optimising for data from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Optimising for data from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Optimising for data from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Optimising for data from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Optimising for data from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Optimising for data from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Optimising for data from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Optimising for data from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Optimising for data from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Optimising for data from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Optimising for data from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Optimising for data from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Optimising for data from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Optimising for data from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Optimising for data from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Optimising for data from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Optimising for data from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Optimising for data from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Optimising for data from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Optimising for data from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Optimising for data from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Optimising for data from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Optimising for data from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Optimising for data from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Optimising for data from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Optimising for data from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Optimising for data from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Optimising for data from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Optimising for data from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Optimising for data from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Optimising for data from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Optimising for data from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Optimising for data from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for EDOLLAR
      Calculating forecast correlations over EDOLLAR
      Correlation estimate
      Estimating from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Estimating from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Estimating from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Estimating from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Estimating from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Estimating from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Estimating from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Estimating from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Estimating from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Estimating from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Estimating from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Estimating from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Estimating from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Estimating from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Estimating from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Estimating from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Estimating from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Estimating from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Estimating from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Estimating from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Estimating from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Estimating from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Estimating from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Estimating from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Estimating from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Estimating from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Estimating from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Estimating from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Estimating from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Estimating from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Estimating from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Estimating from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Estimating from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Estimating from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      2016-11-07    0.266898
      2016-11-08   -0.029803
      2016-11-09   -0.629794
      2016-11-10   -1.362031
      2016-11-11   -2.213139
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE
      2016-05-05     8.316347
      2016-05-06     8.906937
      2016-05-09     9.856458
      2016-05-10    10.714341
      2016-05-11    11.613205
      Freq: B, dtype: float64
      #+END_EXAMPLE

      If you're working through my book you'd know the next stage is deciding
      what level of risk to target (chapter 9) and position sizing (chapter
      10). Let's do the position scaling:

      #+BEGIN_SRC python :session :results output
      from systems.positionsizing import PositionSizing
      possizer=PositionSizing()

      my_config.percentage_vol_target=25
      my_config.notional_trading_capital=500000
      my_config.base_currency="GBP"

      my_system=System([my_account, fcs, empty_rules, combiner, possizer], data, my_config)

      my_system.positionSize.get_subsystem_position("EDOLLAR").tail(5)
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> >>> >>> >>> >>> Adding config defaults
      Calculating subsystem position for EDOLLAR
      Calculating volatility scalar for EDOLLAR
      Calculating instrument value vol for EDOLLAR
      Calculating instrument currency vol for EDOLLAR
      Getting block value for EDOLLAR
      Loading csv data for EDOLLAR
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Getting fx rates for EDOLLAR
      Getting vol target
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for EDOLLAR
      Calculating forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR
      Calculating capped forecast for CORN ewmac32
      Calculating raw forecast CORN for ewmac32
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac32
      Calculating raw forecast EDOLLAR for ewmac32
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac32
      Calculating raw forecast SP500 for ewmac32
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac32
      Calculating raw forecast US10 for ewmac32
      Loading csv data for US10
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Calculating capped forecast for CORN ewmac8
      Calculating raw forecast CORN for ewmac8
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac8
      Calculating raw forecast EDOLLAR for ewmac8
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac8
      Calculating raw forecast SP500 for ewmac8
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac8
      Calculating raw forecast US10 for ewmac8
      Loading csv data for US10
      Only this set of rules ['ewmac32'] is cheap enough to trade for EDOLLAR
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for CORN
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for CORN
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for SP500
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for SP500
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for US10
      Calculating raw forecast weights for EDOLLAR, over EDOLLAR
      Calculating pandl for instrument rules for EDOLLAR
      Calculating pandl for instrument forecast for EDOLLAR ewmac32
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Optimising for data from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Optimising for data from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Optimising for data from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Optimising for data from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Optimising for data from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Optimising for data from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Optimising for data from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Optimising for data from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Optimising for data from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Optimising for data from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Optimising for data from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Optimising for data from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Optimising for data from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Optimising for data from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Optimising for data from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Optimising for data from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Optimising for data from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Optimising for data from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Optimising for data from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Optimising for data from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Optimising for data from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Optimising for data from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Optimising for data from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Optimising for data from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Optimising for data from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Optimising for data from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Optimising for data from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Optimising for data from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Optimising for data from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Optimising for data from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Optimising for data from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Optimising for data from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Optimising for data from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for EDOLLAR
      Calculating forecast correlations over EDOLLAR
      Correlation estimate
      Estimating from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Estimating from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Estimating from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Estimating from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Estimating from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Estimating from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Estimating from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Estimating from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Estimating from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Estimating from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Estimating from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Estimating from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Estimating from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Estimating from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Estimating from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Estimating from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Estimating from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Estimating from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Estimating from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Estimating from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Estimating from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Estimating from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Estimating from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Estimating from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Estimating from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Estimating from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Estimating from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Estimating from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Estimating from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Estimating from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Estimating from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Estimating from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Estimating from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Estimating from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      2016-11-07     2.578084
      2016-11-08    -0.289197
      2016-11-09    -4.049233
      2016-11-10    -8.184443
      2016-11-11   -13.787050
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE
      2016-05-05     76.093317
      2016-05-06     81.825564
      2016-05-09     90.915309
      2016-05-10    101.814765
      2016-05-11    110.356363
      Freq: B, dtype: float64
      #+END_EXAMPLE

      We're almost there. The final stage we need to get positions is to
      combine everything into a portfolio (chapter 11).

      We can estimate these:

      #+BEGIN_SRC python :session :results output
      from systems.portfolio import PortfoliosEstimated
      portfolio_estimate = PortfoliosEstimated()

      ## this will speed things but - but I don't recommend it for actual trading...
      my_config.use_instrument_weight_estimates = True
      my_config.instrument_weight_estimate=dict(method="shrinkage", date_method="in_sample") ## speeds things up

      my_system = System([my_account, fcs, my_rules, combiner, possizer,
                          portfolio_estimate], data, my_config)

      my_system.set_logging_level("on")

      print(my_system.portfolio.get_instrument_weights())
      print(my_system.portfolio.get_instrument_diversification_multiplier())
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> ... >>> >>> >>> ... Adding config defaults
      Calculating instrument weights
      Getting raw instrument weights
      Calculating raw instrument weights
      Cost multiplier of 0.0 will be ignored as equalising SR in optimisation (equalise_SR=True)
      Zero cost multiplier and not applying cost weightings - so costs won't be used at all
      Cost multiplier of %2.f is less than one and not applying cost weightings - effect of costs may be underestimated
      Getting vol target
      Calculating pandl for subsystem for instrument CORN
      Loading csv data for CORN
      Calculating subsystem position for CORN
      Calculating volatility scalar for CORN
      Calculating instrument value vol for CORN
      Calculating instrument currency vol for CORN
      Getting block value for CORN
      Loading csv data for CORN
      Loading csv instrument config
      Loading csv data for CORN
      Getting fx rates for CORN
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for CORN
      Calculating forecast weights for CORN
      Calculating raw forecast weights for CORN
      Calculating capped forecast for CORN ewmac32
      Calculating raw forecast CORN for ewmac32
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac32
      Calculating raw forecast EDOLLAR for ewmac32
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac32
      Calculating raw forecast SP500 for ewmac32
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac32
      Calculating raw forecast US10 for ewmac32
      Loading csv data for US10
      Loading csv cost file
      Loading csv instrument config
      Calculating capped forecast for CORN ewmac8
      Calculating raw forecast CORN for ewmac8
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac8
      Calculating raw forecast EDOLLAR for ewmac8
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac8
      Calculating raw forecast SP500 for ewmac8
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac8
      Calculating raw forecast US10 for ewmac8
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for CORN
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Only this set of rules ['ewmac32'] is cheap enough to trade for EDOLLAR
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for SP500
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for SP500
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for US10
      Calculating raw forecast weights for CORN, over CORN, SP500, US10
      Calculating pandl for instrument rules for CORN
      Calculating pandl for instrument forecast for CORN ewmac32
      Calculating pandl for instrument forecast for CORN ewmac8
      Calculating pandl for instrument rules for SP500
      Calculating pandl for instrument forecast for SP500 ewmac32
      Calculating pandl for instrument forecast for SP500 ewmac8
      Calculating pandl for instrument rules for US10
      Calculating pandl for instrument forecast for US10 ewmac32
      Calculating pandl for instrument forecast for US10 ewmac8
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for CORN
      Calculating forecast correlations over CORN, SP500, US10
      Correlation estimate
      Estimating from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Estimating from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Estimating from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Estimating from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Estimating from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Estimating from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Estimating from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Estimating from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Estimating from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Estimating from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Estimating from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Estimating from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Estimating from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Estimating from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Estimating from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Estimating from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Estimating from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Estimating from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Estimating from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Estimating from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Estimating from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Estimating from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Estimating from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Estimating from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Estimating from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Estimating from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Estimating from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Estimating from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Estimating from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Estimating from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Estimating from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Estimating from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Estimating from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Estimating from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Estimating from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Estimating from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
      Calculating pandl for subsystem for instrument EDOLLAR
      Calculating subsystem position for EDOLLAR
      Calculating volatility scalar for EDOLLAR
      Calculating instrument value vol for EDOLLAR
      Calculating instrument currency vol for EDOLLAR
      Getting block value for EDOLLAR
      Loading csv data for EDOLLAR
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Getting fx rates for EDOLLAR
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for EDOLLAR
      Calculating forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR, over EDOLLAR
      Calculating pandl for instrument rules for EDOLLAR
      Calculating pandl for instrument forecast for EDOLLAR ewmac32
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Optimising for data from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Optimising for data from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Optimising for data from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Optimising for data from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Optimising for data from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Optimising for data from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Optimising for data from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Optimising for data from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Optimising for data from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Optimising for data from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Optimising for data from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Optimising for data from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Optimising for data from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Optimising for data from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Optimising for data from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Optimising for data from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Optimising for data from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Optimising for data from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Optimising for data from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Optimising for data from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Optimising for data from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Optimising for data from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Optimising for data from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Optimising for data from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Optimising for data from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Optimising for data from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Optimising for data from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Optimising for data from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Optimising for data from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Optimising for data from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Optimising for data from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Optimising for data from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Optimising for data from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for EDOLLAR
      Calculating forecast correlations over EDOLLAR
      Correlation estimate
      Estimating from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Estimating from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Estimating from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Estimating from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Estimating from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Estimating from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Estimating from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Estimating from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Estimating from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Estimating from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Estimating from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Estimating from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Estimating from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Estimating from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Estimating from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Estimating from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Estimating from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Estimating from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Estimating from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Estimating from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Estimating from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Estimating from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Estimating from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Estimating from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Estimating from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Estimating from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Estimating from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Estimating from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Estimating from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Estimating from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Estimating from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Estimating from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Estimating from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Estimating from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Calculating pandl for subsystem for instrument SP500
      Calculating subsystem position for SP500
      Calculating volatility scalar for SP500
      Calculating instrument value vol for SP500
      Calculating instrument currency vol for SP500
      Getting block value for SP500
      Loading csv data for SP500
      Loading csv instrument config
      Loading csv data for SP500
      Getting fx rates for SP500
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for SP500
      Calculating forecast weights for SP500
      Calculating raw forecast weights for SP500
      Calculating raw forecast weights for SP500, over CORN, SP500, US10
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for SP500
      Calculating pandl for subsystem for instrument US10
      Calculating subsystem position for US10
      Calculating volatility scalar for US10
      Calculating instrument value vol for US10
      Calculating instrument currency vol for US10
      Getting block value for US10
      Loading csv data for US10
      Loading csv instrument config
      Loading csv data for US10
      Getting fx rates for US10
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for US10
      Calculating forecast weights for US10
      Calculating raw forecast weights for US10
      Calculating raw forecast weights for US10, over CORN, SP500, US10
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for US10
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 2016-11-13 00:00:00
                      CORN   EDOLLAR     SP500      US10
      1981-09-25  0.000000  0.000000  0.000000  0.000000
      1981-09-28  0.000000  0.000000  0.000000  0.000000
      1981-09-29  0.000000  0.000000  0.000000  0.000000
      1981-09-30  0.000000  0.000000  0.000000  0.000000
      1981-10-01  0.000000  0.000000  0.000000  0.000000
      1981-10-02  0.000000  0.000000  0.000000  0.000000
      1981-10-05  0.000000  0.000000  0.000000  0.000000
      1981-10-06  0.000000  0.000000  0.000000  0.000000
      1981-10-07  0.000000  0.000000  0.000000  0.000000
      1981-10-08  0.000000  0.000000  0.000000  0.000000
      1981-10-09  0.000000  0.000000  0.000000  0.000000
      1981-10-12  0.000000  0.000000  0.000000  0.000000
      1981-10-13  0.000000  0.000000  0.000000  0.000000
      1981-10-14  0.000000  0.000000  0.000000  0.000000
      1981-10-15  0.000000  0.000000  0.000000  0.000000
      1981-10-16  0.000000  0.000000  0.000000  0.000000
      1981-10-19  0.000000  0.000000  0.000000  0.000000
      1981-10-20  0.000000  0.000000  0.000000  0.000000
      1981-10-21  0.000000  0.000000  0.000000  0.000000
      1981-10-22  0.000000  0.000000  0.000000  0.000000
      1981-10-23  0.000000  0.000000  0.000000  0.000000
      1981-10-26  0.000000  0.000000  0.000000  0.000000
      1981-10-27  0.000000  0.000000  0.000000  0.000000
      1981-10-28  0.000000  0.000000  0.000000  0.000000
      1981-10-29  0.000000  0.000000  0.000000  0.000000
      1981-10-30  0.000000  0.000000  0.000000  0.000000
      1981-11-02  0.000000  0.000000  0.000000  0.000000
      1981-11-03  0.000000  0.000000  0.000000  0.000000
      1981-11-04  0.000000  0.000000  0.000000  0.000000
      1981-11-05  0.000000  0.000000  0.000000  0.000000
      ...       ...       ...       ...
      2016-10-03  0.271257  0.242036  0.267847  0.218861
      2016-10-04  0.271257  0.242036  0.267847  0.218861
      2016-10-05  0.271257  0.242036  0.267847  0.218861
      2016-10-06  0.271257  0.242036  0.267847  0.218861
      2016-10-07  0.271257  0.242036  0.267847  0.218861
      2016-10-10  0.271257  0.242036  0.267847  0.218861
      2016-10-11  0.271257  0.242036  0.267847  0.218861
      2016-10-12  0.271257  0.242036  0.267847  0.218861
      2016-10-13  0.271257  0.242036  0.267847  0.218861
      2016-10-14  0.271257  0.242036  0.267847  0.218861
      2016-10-17  0.271257  0.242036  0.267847  0.218861
      2016-10-18  0.271257  0.242036  0.267847  0.218861
      2016-10-19  0.271257  0.242036  0.267847  0.218861
      2016-10-20  0.271257  0.242036  0.267847  0.218861
      2016-10-21  0.271257  0.242036  0.267847  0.218861
      2016-10-24  0.271257  0.242036  0.267847  0.218861
      2016-10-25  0.271257  0.242036  0.267847  0.218861
      2016-10-26  0.271257  0.242036  0.267847  0.218861
      2016-10-27  0.271257  0.242036  0.267847  0.218861
      2016-10-28  0.271257  0.242036  0.267847  0.218861
      2016-10-31  0.271257  0.242036  0.267847  0.218861
      2016-11-01  0.271257  0.242036  0.267847  0.218861
      2016-11-02  0.271257  0.242036  0.267847  0.218861
      2016-11-03  0.271257  0.242036  0.267847  0.218861
      2016-11-04  0.271257  0.242036  0.267847  0.218861
      2016-11-07  0.271257  0.242036  0.267847  0.218861
      2016-11-08  0.271257  0.242036  0.267847  0.218861
      2016-11-09  0.271257  0.242036  0.267847  0.218861
      2016-11-10  0.271257  0.242036  0.267847  0.218861
      2016-11-11  0.271257  0.242036  0.267847  0.218861

      [9166 rows x 4 columns]
      Calculating instrument div. multiplier
      Calculating instrument correlations
      /Users/lriley/.ghq/github.com/analyticd/pysystemtrade/systems/portfolio.py:665: FutureWarning:
      .resample() is now a deferred operation
      You called diff(...) on this deferred object which materialized it into a dataframe
      by implicitly taking the mean.  Use .resample(...).mean() instead
        pandl = pandl.cumsum().resample(frequency).diff()
      Correlation estimate
      Estimating from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Estimating from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      /Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
        corrmat[corrmat < 0] = 0.0
      Estimating from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Estimating from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Estimating from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Estimating from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Estimating from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Estimating from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Estimating from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Estimating from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Estimating from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Estimating from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Estimating from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Estimating from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Estimating from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Estimating from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Estimating from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Estimating from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Estimating from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Estimating from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Estimating from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Estimating from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Estimating from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Estimating from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Estimating from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Estimating from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Estimating from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Estimating from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Estimating from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Estimating from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Estimating from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Estimating from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Estimating from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Estimating from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Estimating from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Estimating from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
      1981-09-25         NaN
      1981-09-28    1.000000
      1981-09-29    1.000000
      1981-09-30    1.000000
      1981-10-01    1.000000
      1981-10-02    1.000000
      1981-10-05    1.000000
      1981-10-06    1.000000
      1981-10-07    1.000000
      1981-10-08    1.000000
      1981-10-09    1.000000
      1981-10-12    1.000000
      1981-10-13    1.000000
      1981-10-14    1.000000
      1981-10-15    1.000000
      1981-10-16    1.000000
      1981-10-19    1.000000
      1981-10-20    1.000000
      1981-10-21    1.000000
      1981-10-22    1.000000
      1981-10-23    1.000000
      1981-10-26    1.000000
      1981-10-27    1.000000
      1981-10-28    1.000000
      1981-10-29    1.000000
      1981-10-30    1.000000
      1981-11-02    1.000000
      1981-11-03    1.000000
      1981-11-04    1.000000
      1981-11-05    1.000000
                      ...
      2016-10-03    1.739083
      2016-10-04    1.738989
      2016-10-05    1.738896
      2016-10-06    1.738804
      2016-10-07    1.738714
      2016-10-10    1.738626
      2016-10-11    1.738538
      2016-10-12    1.738453
      2016-10-13    1.738368
      2016-10-14    1.738285
      2016-10-17    1.738203
      2016-10-18    1.738123
      2016-10-19    1.738044
      2016-10-20    1.737966
      2016-10-21    1.737889
      2016-10-24    1.737814
      2016-10-25    1.737739
      2016-10-26    1.737666
      2016-10-27    1.737594
      2016-10-28    1.737524
      2016-10-31    1.737454
      2016-11-01    1.737385
      2016-11-02    1.737318
      2016-11-03    1.737252
      2016-11-04    1.737186
      2016-11-07    1.737122
      2016-11-08    1.737059
      2016-11-09    1.736996
      2016-11-10    1.736935
      2016-11-11    1.736875
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE
                      CORN   EDOLLAR     SP500      US10
      2016-05-05  0.273715  0.245994  0.281982  0.198309
      2016-05-06  0.273715  0.245994  0.281982  0.198309
      2016-05-09  0.273715  0.245994  0.281982  0.198309
      2016-05-10  0.273715  0.245994  0.281982  0.198309
      2016-05-11  0.273715  0.245994  0.281982  0.198309

      ## idm
      2016-05-05    1.679175
      2016-05-06    1.679169
      2016-05-09    1.679163
      2016-05-10    1.679157
      2016-05-11    1.679151
      Freq: B, dtype: float64
      #+END_EXAMPLE

      Alternatively we can just make up some instrument weights, and
      diversification multiplier.

      /Again if we really couldn't be bothered, this would default to equal
      weights and 1.0 respectively/

      #+BEGIN_SRC python :session :results output
      from systems.portfolio import PortfoliosFixed
      portfolio=PortfoliosFixed()
      my_config.instrument_weights=dict(US10=.1, EDOLLAR=.4, CORN=.3, SP500=.8)
      my_config.instrument_div_multiplier=1.5
      my_config.use_instrument_weight_estimates = False

      my_system=System([my_account, fcs, empty_rules, combiner, possizer, portfolio], data, my_config)

      my_system.portfolio.get_notional_position("EDOLLAR").tail(5)
      #+END_SRC

      #+RESULTS:
      #+begin_example

      >>> >>> >>> >>> >>> Adding config defaults
      Calculating notional position for EDOLLAR
      Calculating diversification multiplier
      Calculating instrument weights
      Calculating raw instrument weights
      Calculating subsystem position for CORN
      Calculating volatility scalar for CORN
      Calculating instrument value vol for CORN
      Calculating instrument currency vol for CORN
      Getting block value for CORN
      Loading csv data for CORN
      Loading csv instrument config
      Loading csv data for CORN
      Getting fx rates for CORN
      Getting vol target
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for CORN
      Calculating forecast weights for CORN
      Calculating raw forecast weights for CORN
      Calculating capped forecast for CORN ewmac32
      Calculating raw forecast CORN for ewmac32
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac32
      Calculating raw forecast EDOLLAR for ewmac32
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac32
      Calculating raw forecast SP500 for ewmac32
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac32
      Calculating raw forecast US10 for ewmac32
      Loading csv data for US10
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for CORN
      Calculating capped forecast for CORN ewmac8
      Calculating raw forecast CORN for ewmac8
      Loading csv data for CORN
      Calculating capped forecast for EDOLLAR ewmac8
      Calculating raw forecast EDOLLAR for ewmac8
      Loading csv data for EDOLLAR
      Calculating capped forecast for SP500 ewmac8
      Calculating raw forecast SP500 for ewmac8
      Loading csv data for SP500
      Calculating capped forecast for US10 ewmac8
      Calculating raw forecast US10 for ewmac8
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for CORN
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Only this set of rules ['ewmac32'] is cheap enough to trade for EDOLLAR
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for SP500
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for SP500
      Loading csv cost file
      Loading csv instrument config
      Loading csv data for US10
      Only this set of rules ['ewmac32', 'ewmac8'] is cheap enough to trade for US10
      Calculating raw forecast weights for CORN, over CORN, SP500, US10
      Calculating pandl for instrument rules for CORN
      Calculating pandl for instrument forecast for CORN ewmac32
      Calculating pandl for instrument forecast for CORN ewmac8
      Calculating pandl for instrument rules for SP500
      Calculating pandl for instrument forecast for SP500 ewmac32
      Calculating pandl for instrument forecast for SP500 ewmac8
      Calculating pandl for instrument rules for US10
      Calculating pandl for instrument forecast for US10 ewmac32
      Calculating pandl for instrument forecast for US10 ewmac8
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for CORN
      Calculating forecast correlations over CORN, SP500, US10
      Correlation estimate
      Estimating from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Estimating from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Estimating from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Estimating from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Estimating from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Estimating from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Estimating from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Estimating from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Estimating from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Estimating from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Estimating from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Estimating from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Estimating from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Estimating from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Estimating from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Estimating from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Estimating from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Estimating from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Estimating from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Estimating from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Estimating from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Estimating from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Estimating from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Estimating from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Estimating from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Estimating from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Estimating from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Estimating from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Estimating from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Estimating from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Estimating from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Estimating from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Estimating from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Estimating from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Estimating from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Estimating from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
      Calculating subsystem position for EDOLLAR
      Calculating volatility scalar for EDOLLAR
      Calculating instrument value vol for EDOLLAR
      Calculating instrument currency vol for EDOLLAR
      Getting block value for EDOLLAR
      Loading csv data for EDOLLAR
      Loading csv instrument config
      Loading csv data for EDOLLAR
      Getting fx rates for EDOLLAR
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for EDOLLAR
      Calculating forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR
      Calculating raw forecast weights for EDOLLAR, over EDOLLAR
      Calculating pandl for instrument rules for EDOLLAR
      Calculating pandl for instrument forecast for EDOLLAR ewmac32
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Optimising for data from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Optimising for data from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Optimising for data from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Optimising for data from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Optimising for data from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Optimising for data from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Optimising for data from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Optimising for data from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Optimising for data from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Optimising for data from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Optimising for data from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Optimising for data from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Optimising for data from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Optimising for data from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Optimising for data from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Optimising for data from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Optimising for data from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Optimising for data from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Optimising for data from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Optimising for data from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Optimising for data from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Optimising for data from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Optimising for data from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Optimising for data from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Optimising for data from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Optimising for data from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Optimising for data from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Optimising for data from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Optimising for data from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Optimising for data from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Optimising for data from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Optimising for data from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Optimising for data from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for EDOLLAR
      Calculating forecast correlations over EDOLLAR
      Correlation estimate
      Estimating from 1983-10-02 00:00:00 to 1984-10-31 00:00:00
      Estimating from 1984-10-31 00:00:00 to 1985-10-31 00:00:00
      Estimating from 1985-10-31 00:00:00 to 1986-10-31 00:00:00
      Estimating from 1986-10-31 00:00:00 to 1987-10-31 00:00:00
      Estimating from 1987-10-31 00:00:00 to 1988-10-31 00:00:00
      Estimating from 1988-10-31 00:00:00 to 1989-10-31 00:00:00
      Estimating from 1989-10-31 00:00:00 to 1990-10-31 00:00:00
      Estimating from 1990-10-31 00:00:00 to 1991-10-31 00:00:00
      Estimating from 1991-10-31 00:00:00 to 1992-10-31 00:00:00
      Estimating from 1992-10-31 00:00:00 to 1993-10-31 00:00:00
      Estimating from 1993-10-31 00:00:00 to 1994-10-31 00:00:00
      Estimating from 1994-10-31 00:00:00 to 1995-10-31 00:00:00
      Estimating from 1995-10-31 00:00:00 to 1996-10-31 00:00:00
      Estimating from 1996-10-31 00:00:00 to 1997-10-31 00:00:00
      Estimating from 1997-10-31 00:00:00 to 1998-10-31 00:00:00
      Estimating from 1998-10-31 00:00:00 to 1999-10-31 00:00:00
      Estimating from 1999-10-31 00:00:00 to 2000-10-31 00:00:00
      Estimating from 2000-10-31 00:00:00 to 2001-10-31 00:00:00
      Estimating from 2001-10-31 00:00:00 to 2002-10-31 00:00:00
      Estimating from 2002-10-31 00:00:00 to 2003-10-31 00:00:00
      Estimating from 2003-10-31 00:00:00 to 2004-10-31 00:00:00
      Estimating from 2004-10-31 00:00:00 to 2005-10-31 00:00:00
      Estimating from 2005-10-31 00:00:00 to 2006-10-31 00:00:00
      Estimating from 2006-10-31 00:00:00 to 2007-10-31 00:00:00
      Estimating from 2007-10-31 00:00:00 to 2008-10-31 00:00:00
      Estimating from 2008-10-31 00:00:00 to 2009-10-31 00:00:00
      Estimating from 2009-10-31 00:00:00 to 2010-10-31 00:00:00
      Estimating from 2010-10-31 00:00:00 to 2011-10-31 00:00:00
      Estimating from 2011-10-31 00:00:00 to 2012-10-31 00:00:00
      Estimating from 2012-10-31 00:00:00 to 2013-10-31 00:00:00
      Estimating from 2013-10-31 00:00:00 to 2014-10-31 00:00:00
      Estimating from 2014-10-31 00:00:00 to 2015-10-31 00:00:00
      Estimating from 2015-10-31 00:00:00 to 2016-10-31 00:00:00
      Estimating from 2016-10-31 00:00:00 to 2016-11-13 00:00:00
      Calculating subsystem position for SP500
      Calculating volatility scalar for SP500
      Calculating instrument value vol for SP500
      Calculating instrument currency vol for SP500
      Getting block value for SP500
      Loading csv data for SP500
      Loading csv instrument config
      Loading csv data for SP500
      Getting fx rates for SP500
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for SP500
      Calculating forecast weights for SP500
      Calculating raw forecast weights for SP500
      Calculating raw forecast weights for SP500, over CORN, SP500, US10
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for SP500
      Calculating subsystem position for US10
      Calculating volatility scalar for US10
      Calculating instrument value vol for US10
      Calculating instrument currency vol for US10
      Getting block value for US10
      Loading csv data for US10
      Loading csv instrument config
      Loading csv data for US10
      Getting fx rates for US10
      Loading csv instrument config
      Loading csv fx data
      Loading csv fx data
      Loading csv fx data
      Calculating combined forecast for US10
      Calculating forecast weights for US10
      Calculating raw forecast weights for US10
      Calculating raw forecast weights for US10, over CORN, SP500, US10
      Using cost multiplier on optimisation of 0.00
      Optimising...
      Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
      Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
      Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
      Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
      Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
      Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
      Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
      Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
      Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
      Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
      Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
      Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
      Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
      Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
      Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
      Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
      Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
      Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
      Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
      Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
      Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
      Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
      Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
      Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
      Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
      Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
      Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
      Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
      Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
      Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
      Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
      Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
      Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
      Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
      Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
      Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:02
      Applying cost weighting to optimisation results
      Calculating forecast div multiplier for US10
      2016-11-07    0.966782
      2016-11-08   -0.108449
      2016-11-09   -1.518462
      2016-11-10   -3.069166
      2016-11-11   -5.170144
      Freq: B, dtype: float64
#+end_example

      #+BEGIN_EXAMPLE
      2016-05-05    45.655990
      2016-05-06    49.095339
      2016-05-09    54.549186
      2016-05-10    61.088859
      2016-05-11    66.213818
      Freq: B, dtype: float64
      #+END_EXAMPLE

      Although this is fine and dandy, we're probably going to be curious
      about whether this made money or not. So we'll need to add just one more
      stage, to count our virtual profits:

      #+BEGIN_SRC python :session :results output
      from systems.account import Account
      account=Account()
      my_system=System([fcs, empty_rules, combiner, possizer, portfolio, account], data, my_config)
      profits=my_system.account.portfolio()
      profits.percent().stats()
      #+END_SRC

      #+RESULTS:
      :
      : >>> Adding config defaults
      : Traceback (most recent call last):
      :   File "<stdin>", line 1, in <module>
      : AttributeError: 'System' object has no attribute 'account'
      : Traceback (most recent call last):
      :   File "<stdin>", line 1, in <module>
      : NameError: name 'profits' is not defined

      #+BEGIN_EXAMPLE
      [[('min', '-0.1349'), ('max', '0.1313'), ('median', '-4.308e-06'), ('mean', '0.0005715'), ('std', '0.01726'), ('skew', '-0.1568'), ('ann_mean', '0.1463'), ('ann_std', '0.2762'), ('sharpe', '0.5297'), ...)]
      #+END_EXAMPLE

      Once again we have the now familiar accounting object. Some results have
      been removed, in the interests of staying awake.

      These are profits net of tax. You can see the gross profits and costs:

      #+BEGIN_SRC python :session
      profits.gross.percent().stats() ## all other things work eg profits.gross.sharpe()
      profits.costs.percent().stats()
      #+END_SRC

      For more see the costs and accountCurve section of the userguide.

** Getting config from dictionaries and files

To speed things up you can also pass a dictionary to =Config()=. To
reproduce the setup we had above we'd make a dict like so:

#+BEGIN_SRC python :session
from sysdata.configdata import Config
my_config=Config(dict(trading_rules=dict(ewmac8=ewmac_8, ewmac32=ewmac_32), instrument_weights=dict(US10=.1, EDOLLAR=.4, CORN=.3, SP500=.2), instrument_div_multiplier=1.5, forecast_scalars=dict(ewmac8=5.3, ewmac32=2.65), forecast_weights=dict(ewmac8=0.5, ewmac32=0.5), forecast_div_multiplier=1.1
                      ,percentage_vol_target=25, notional_trading_capital=500000, base_currency="GBP"))
my_config
#+END_SRC

#+RESULTS:

Note we don't need to tell the config that we're not using estimation
for forecast scalars, forecast weights and instrument weights; this is
the default behaviour.

#+BEGIN_EXAMPLE
Config with elements: base_currency, forecast_div_multiplier, forecast_scalars, forecast_weights, instrument_div_multiplier, instrument_weights, notional_trading_capital, percentage_vol_target, trading_rules
#+END_EXAMPLE

Alternatively we could get the same result from reading a [[http://pyyaml.org][yaml]] file ([[file:~/.ghq/github.com/analyticd/pysystemtrade/systems/provided/example/simplesystemconfig.yaml][this one to
be precise]] ). Don't worry if you're not familiar with yaml; it's just a nice way
of creating nested dicts, lists and other python objects in plain text. Just be
aware that indentations are important, just in like python.

#+BEGIN_SRC python :session
my_config=Config("systems.provided.example.simplesystemconfig.yaml")
#+END_SRC

(Notice we don't put filenames in; rather a python style reference
within the project)

If you look at the YAML file you'll notice that the trading rule
function has been specified as a string
=systems.provided.example.rules.ewmac_forecast_with_defaults=. This is
because we can't easily create a function in a YAML text file (/we can
in theory; but it's quite a bit of work and creates a potential security
risk/). Instead we specify where the relevant function can be found in
the project directory structure.

Similarly for the ewmac8 rule we've specified a data source
=data.daily_prices= which points to =system.data.daily_prices()=. This
is the default, which is why we haven't needed to specify it before, and
it isn't included in the specification for the ewmac32 rule. Equally we
could specify any attribute and method within the system object, as long
as it takes the argument =instrument_code=. We can also have a list of
data inputs. This means you can configure almost any trading rule quite
easily through configuration changes.

** A simple pre-baked system

Normally we wouldn't create a system by adding each stage manually
(importing and creating long lists of stage objects). Instead you can
use a 'pre baked' system, and then modify it as required.

For example here is a pre-baked version of the previous example (code is
[[file:~/.ghq/github.com/analyticd/pysystemtrade/examples/introduction/prebakedsystems.py][here]] ):

#+BEGIN_SRC python :session
from systems.provided.example.simplesystem import simplesystem
my_system=simplesystem()
my_system
#+END_SRC

#+RESULTS:
: System with .config, .data, and .stages: accounts, portfolio, positionSize, combForecast, forecastScaleCap, rules

#+BEGIN_EXAMPLE
System with stages: accounts, portfolio, positionSize, combForecast, forecastScaleCap, rules
#+END_EXAMPLE

Everything will now work as before:

#+BEGIN_SRC python :session
my_system.portfolio.get_notional_position("EDOLLAR").tail(5)
#+END_SRC

#+RESULTS:
: 2016-11-07   -10.494962
: 2016-11-08   -15.857233
: 2016-11-09   -16.012381
: 2016-11-10   -23.799042
: 2016-11-11   -34.351904
: Freq: B, dtype: float64

By default this has loaded the same data and read the config from the
same yaml file. However we can also do this manually, allowing us to use
new =data= and a modified =config= with a pre-baked system.

#+BEGIN_SRC python :session :results output
from sysdata.configdata import Config
from sysdata.csvdata import csvFuturesData

my_config=Config("systems.provided.example.simplesystemconfig.yaml")
my_data=csvFuturesData()

## I could change my_config, and my_data here if I wanted to
my_system=simplesystem(config=my_config, data=my_data)
print(my_system)
#+END_SRC

#+RESULTS:
:
: >>> >>> >>> >>> >>> ... >>> System with .config, .data, and .stages: accounts, portfolio, positionSize, combForecast, forecastScaleCap, rules

For the vast majority of the time this will be how you create new
systems.

** A complete pre-baked system

Let's now see how we might use another 'pre-baked' system, in this case
the staunch systems trader example definied in chapter 15 of my book.
Here again we default to using csv data.

(Code is [[file:~/.ghq/github.com/analyticd/pysystemtrade/examples/introduction/prebakedsystems.py][here]] )

#+BEGIN_SRC python :session
from systems.provided.futures_chapter15.basesystem import futures_system
system=futures_system()
system.portfolio.get_notional_position("EUROSTX").tail(5)
#+END_SRC

#+RESULTS:
: 2016-11-07    0.952266
: 2016-11-08    1.010667
: 2016-11-09    1.064840
: 2016-11-10    1.148134
: 2016-11-11    1.155898
: Freq: B, dtype: float64

#+BEGIN_EXAMPLE
                 pos
2015-12-04  0.624183
2015-12-07  0.629924
2015-12-08  0.538517
2015-12-09  0.451322
2015-12-10  0.385892
#+END_EXAMPLE

It's worth looking at the config for this system [[file:~/.ghq/github.com/analyticd/pysystemtrade/systems/provided/futures_chapter15/futuresconfig.yaml][here]], and comparing it to what
you see in chapter 15.

You can also get a similar system where forecast scalars are estimated;
as well as forecast / instrument diversification multipliers and
weights. Because estimation takes a while, it's worth turning logging on
full to keep track of what's going on.

#+BEGIN_SRC python :session :results output
from systems.provided.futures_chapter15.estimatedsystem import futures_system
system = futures_system(log_level="on")
system.portfolio.get_notional_position("EUROSTX").tail(5)
#+END_SRC

#+RESULTS:
#+begin_example

>>> Calculating notional position for EUROSTX
Calculating instrument div. multiplier
Calculating instrument correlations
Getting vol target
Calculating pandl for subsystem for instrument CORN
Loading csv data for CORN
Calculating subsystem position for CORN
Calculating volatility scalar for CORN
Calculating instrument value vol for CORN
Calculating instrument currency vol for CORN
Getting block value for CORN
Loading csv carry data for CORN
Loading csv instrument config
Calculating daily volatility for CORN
Calculating daily prices for CORN
Loading csv data for CORN
Getting fx rates for CORN
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for CORN
Calculating forecast weights for CORN
Calculating raw forecast weights for CORN
Calculating capped forecast for CORN carry
Calculating raw forecast CORN for carry
Getting forecast scalar for carry over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Calculating raw forecast EDOLLAR for carry
Loading csv carry data for EDOLLAR
Calculating daily volatility for EDOLLAR
Calculating daily prices for EDOLLAR
Loading csv data for EDOLLAR
Calculating raw forecast EUROSTX for carry
Loading csv carry data for EUROSTX
Calculating daily volatility for EUROSTX
Calculating daily prices for EUROSTX
Loading csv data for EUROSTX
Calculating raw forecast MXP for carry
Loading csv carry data for MXP
Calculating daily volatility for MXP
Calculating daily prices for MXP
Loading csv data for MXP
Calculating raw forecast US10 for carry
Loading csv carry data for US10
Calculating daily volatility for US10
Calculating daily prices for US10
Loading csv data for US10
Calculating raw forecast V2X for carry
Loading csv carry data for V2X
Calculating daily volatility for V2X
Calculating daily prices for V2X
Loading csv data for V2X
Calculating capped forecast for EDOLLAR carry
Calculating capped forecast for EUROSTX carry
Calculating capped forecast for MXP carry
Calculating capped forecast for US10 carry
Calculating capped forecast for V2X carry
Loading csv cost file
Loading csv instrument config
Calculating capped forecast for CORN ewmac16_64
Calculating raw forecast CORN for ewmac16_64
Getting forecast scalar for ewmac16_64 over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Calculating raw forecast EDOLLAR for ewmac16_64
Calculating raw forecast EUROSTX for ewmac16_64
Calculating raw forecast MXP for ewmac16_64
Calculating raw forecast US10 for ewmac16_64
Calculating raw forecast V2X for ewmac16_64
Calculating capped forecast for EDOLLAR ewmac16_64
Calculating capped forecast for EUROSTX ewmac16_64
Calculating capped forecast for MXP ewmac16_64
Calculating capped forecast for US10 ewmac16_64
Calculating capped forecast for V2X ewmac16_64
Calculating capped forecast for CORN ewmac32_128
Calculating raw forecast CORN for ewmac32_128
Getting forecast scalar for ewmac32_128 over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Calculating raw forecast EDOLLAR for ewmac32_128
Calculating raw forecast EUROSTX for ewmac32_128
Calculating raw forecast MXP for ewmac32_128
Calculating raw forecast US10 for ewmac32_128
Calculating raw forecast V2X for ewmac32_128
Calculating capped forecast for EDOLLAR ewmac32_128
Calculating capped forecast for EUROSTX ewmac32_128
Calculating capped forecast for MXP ewmac32_128
Calculating capped forecast for US10 ewmac32_128
Calculating capped forecast for V2X ewmac32_128
Calculating capped forecast for CORN ewmac64_256
Calculating raw forecast CORN for ewmac64_256
Getting forecast scalar for ewmac64_256 over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Calculating raw forecast EDOLLAR for ewmac64_256
Calculating raw forecast EUROSTX for ewmac64_256
Calculating raw forecast MXP for ewmac64_256
Calculating raw forecast US10 for ewmac64_256
Calculating raw forecast V2X for ewmac64_256
Calculating capped forecast for EDOLLAR ewmac64_256
Calculating capped forecast for EUROSTX ewmac64_256
Calculating capped forecast for MXP ewmac64_256
Calculating capped forecast for US10 ewmac64_256
Calculating capped forecast for V2X ewmac64_256
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for CORN
Loading csv cost file
Loading csv instrument config
Loading csv data for EDOLLAR
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for EDOLLAR
Loading csv cost file
Loading csv instrument config
Loading csv data for EUROSTX
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for EUROSTX
Loading csv cost file
Loading csv instrument config
Loading csv data for MXP
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for MXP
Loading csv cost file
Loading csv instrument config
Loading csv data for US10
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for US10
Loading csv cost file
Loading csv instrument config
Loading csv data for V2X
Only this set of rules ['carry', 'ewmac16_64', 'ewmac32_128', 'ewmac64_256'] is cheap enough to trade for V2X
Calculating raw forecast weights for CORN, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Calculating pandl for instrument rules for CORN
Calculating pandl for instrument forecast for CORN carry
Calculating pandl for instrument forecast for CORN ewmac16_64
Calculating pandl for instrument forecast for CORN ewmac32_128
Calculating pandl for instrument forecast for CORN ewmac64_256
Calculating pandl for instrument rules for EDOLLAR
Calculating pandl for instrument forecast for EDOLLAR carry
Calculating pandl for instrument forecast for EDOLLAR ewmac16_64
Calculating pandl for instrument forecast for EDOLLAR ewmac32_128
Calculating pandl for instrument forecast for EDOLLAR ewmac64_256
Calculating pandl for instrument rules for EUROSTX
Calculating pandl for instrument forecast for EUROSTX carry
Calculating pandl for instrument forecast for EUROSTX ewmac16_64
Calculating pandl for instrument forecast for EUROSTX ewmac32_128
Calculating pandl for instrument forecast for EUROSTX ewmac64_256
Calculating pandl for instrument rules for MXP
Calculating pandl for instrument forecast for MXP carry
Calculating pandl for instrument forecast for MXP ewmac16_64
Calculating pandl for instrument forecast for MXP ewmac32_128
Calculating pandl for instrument forecast for MXP ewmac64_256
Calculating pandl for instrument rules for US10
Calculating pandl for instrument forecast for US10 carry
Calculating pandl for instrument forecast for US10 ewmac16_64
Calculating pandl for instrument forecast for US10 ewmac32_128
Calculating pandl for instrument forecast for US10 ewmac64_256
Calculating pandl for instrument rules for V2X
Calculating pandl for instrument forecast for V2X carry
Calculating pandl for instrument forecast for V2X ewmac16_64
Calculating pandl for instrument forecast for V2X ewmac32_128
Calculating pandl for instrument forecast for V2X ewmac64_256
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for CORN
Calculating forecast correlations over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Correlation estimate
Estimating from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Estimating from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Estimating from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Estimating from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Estimating from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Estimating from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Estimating from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Estimating from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Estimating from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Estimating from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Estimating from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Estimating from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Estimating from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Estimating from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Estimating from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Estimating from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Estimating from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Estimating from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Estimating from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Estimating from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Estimating from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Estimating from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Estimating from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Estimating from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Estimating from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Estimating from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Estimating from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Estimating from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Estimating from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Estimating from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Estimating from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Estimating from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Estimating from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Estimating from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Estimating from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Estimating from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
Calculating pandl for subsystem for instrument EDOLLAR
Calculating subsystem position for EDOLLAR
Calculating volatility scalar for EDOLLAR
Calculating instrument value vol for EDOLLAR
Calculating instrument currency vol for EDOLLAR
Getting block value for EDOLLAR
Loading csv instrument config
Getting fx rates for EDOLLAR
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for EDOLLAR
Calculating forecast weights for EDOLLAR
Calculating raw forecast weights for EDOLLAR
Calculating raw forecast weights for EDOLLAR, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for EDOLLAR
Calculating pandl for subsystem for instrument EUROSTX
Calculating subsystem position for EUROSTX
Calculating volatility scalar for EUROSTX
Calculating instrument value vol for EUROSTX
Calculating instrument currency vol for EUROSTX
Getting block value for EUROSTX
Loading csv instrument config
Getting fx rates for EUROSTX
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for EUROSTX
Calculating forecast weights for EUROSTX
Calculating raw forecast weights for EUROSTX
Calculating raw forecast weights for EUROSTX, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for EUROSTX
Calculating pandl for subsystem for instrument MXP
Calculating subsystem position for MXP
Calculating volatility scalar for MXP
Calculating instrument value vol for MXP
Calculating instrument currency vol for MXP
Getting block value for MXP
Loading csv instrument config
Getting fx rates for MXP
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for MXP
Calculating forecast weights for MXP
Calculating raw forecast weights for MXP
Calculating raw forecast weights for MXP, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for MXP
Calculating pandl for subsystem for instrument US10
Calculating subsystem position for US10
Calculating volatility scalar for US10
Calculating instrument value vol for US10
Calculating instrument currency vol for US10
Getting block value for US10
Loading csv instrument config
Getting fx rates for US10
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for US10
Calculating forecast weights for US10
Calculating raw forecast weights for US10
Calculating raw forecast weights for US10, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for US10
Calculating pandl for subsystem for instrument V2X
Calculating subsystem position for V2X
Calculating volatility scalar for V2X
Calculating instrument value vol for V2X
Calculating instrument currency vol for V2X
Getting block value for V2X
Loading csv instrument config
Getting fx rates for V2X
Loading csv instrument config
Loading csv fx data
Calculating combined forecast for V2X
Calculating forecast weights for V2X
Calculating raw forecast weights for V2X
Calculating raw forecast weights for V2X, over CORN, EDOLLAR, EUROSTX, MXP, US10, V2X
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:05
Applying cost weighting to optimisation results
Calculating forecast div multiplier for V2X
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/systems/portfolio.py:665: FutureWarning:
.resample() is now a deferred operation
You called diff(...) on this deferred object which materialized it into a dataframe
by implicitly taking the mean.  Use .resample(...).mean() instead
  pandl = pandl.cumsum().resample(frequency).diff()
Correlation estimate
Estimating from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Estimating from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Estimating from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
Estimating from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
Estimating from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
Estimating from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
Estimating from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
Estimating from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
Estimating from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
Estimating from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
Estimating from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
Estimating from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
Estimating from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
Estimating from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
Estimating from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
Estimating from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
Estimating from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
Estimating from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
Estimating from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
Estimating from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
Estimating from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
Estimating from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
Estimating from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
Estimating from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
Estimating from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
Estimating from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
Estimating from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
Estimating from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
Estimating from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
Estimating from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
Estimating from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
Estimating from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
Estimating from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Estimating from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Estimating from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Estimating from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
Calculating instrument weights
Getting raw instrument weights
Calculating raw instrument weights
Cost multiplier of 0.0 will be ignored as equalising SR in optimisation (equalise_SR=True)
Zero cost multiplier and not applying cost weightings - so costs won't be used at all
Cost multiplier of %2.f is less than one and not applying cost weightings - effect of costs may be underestimated
Using cost multiplier on optimisation of 0.00
Optimising...
Optimising for data from 1981-09-27 00:00:00 to 1982-09-30 00:00:00
Optimising for data from 1982-09-30 00:00:00 to 1983-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1983-09-30 00:00:00 to 1984-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1984-09-30 00:00:00 to 1985-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1985-09-30 00:00:00 to 1986-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1986-09-30 00:00:00 to 1987-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1987-09-30 00:00:00 to 1988-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1988-09-30 00:00:00 to 1989-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1989-09-30 00:00:00 to 1990-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1990-09-30 00:00:00 to 1991-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1991-09-30 00:00:00 to 1992-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1992-09-30 00:00:00 to 1993-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1993-09-30 00:00:00 to 1994-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1994-09-30 00:00:00 to 1995-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1995-09-30 00:00:00 to 1996-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1996-09-30 00:00:00 to 1997-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1997-09-30 00:00:00 to 1998-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1998-09-30 00:00:00 to 1999-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 1999-09-30 00:00:00 to 2000-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2000-09-30 00:00:00 to 2001-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2001-09-30 00:00:00 to 2002-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2002-09-30 00:00:00 to 2003-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2003-09-30 00:00:00 to 2004-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2004-09-30 00:00:00 to 2005-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2005-09-30 00:00:00 to 2006-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2006-09-30 00:00:00 to 2007-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2007-09-30 00:00:00 to 2008-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2008-09-30 00:00:00 to 2009-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2009-09-30 00:00:00 to 2010-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2010-09-30 00:00:00 to 2011-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2011-09-30 00:00:00 to 2012-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2012-09-30 00:00:00 to 2013-09-30 00:00:00
/Users/lriley/.ghq/github.com/analyticd/pysystemtrade/syscore/correlations.py:181: RuntimeWarning: invalid value encountered in less
  corrmat[corrmat < 0] = 0.0
Optimising for data from 2013-09-30 00:00:00 to 2014-09-30 00:00:00
Optimising for data from 2014-09-30 00:00:00 to 2015-09-30 00:00:00
Optimising for data from 2015-09-30 00:00:00 to 2016-09-30 00:00:00
Optimising for data from 2016-09-30 00:00:00 to 2016-11-13 00:00:00
2016-11-07    0.465580
2016-11-08    0.501872
2016-11-09    0.549963
2016-11-10    0.608108
2016-11-11    0.609667
Freq: B, dtype: float64
#+end_example

Because this runs quite slowly you might want to save the system data.
This lives in the cache attribute.

#+BEGIN_SRC python :session
system.pickle_cache("private.this_system_name.pck") ## use any file extension you like

## In a new session
from systems.provided.futures_chapter15.estimatedsystem import futures_system
system = futures_system(log_level="on")
system.unpickle_cache("private.this_system_name.pck")
system.accounts.portfolio().sharpe() ## this will run much faster and reuse previous calculations
#+END_SRC

#+RESULTS:
: 0.5342580641625907

You'll probably want to read the [[./userguide.org][users guide]] next.
